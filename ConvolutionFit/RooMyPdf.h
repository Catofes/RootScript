/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOMYPDF
#define ROOMYPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TH1F.h"
#include "fastgl.h"
#include <vector>

class RooMyPdf : public RooAbsPdf
{
public:
    RooMyPdf()
    {};

    RooMyPdf(const char *name, const char *title,
             RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width, int method = 0);

    RooMyPdf(const RooMyPdf &other, const char *name = 0);

    virtual TObject *clone(const char *newname) const
    { return new RooMyPdf(*this, newname); }

    inline virtual ~RooMyPdf()
    {
        if (temp != nullptr) {
            delete temp;
        }
    }

    void cuda_gaus_prepare();

    TH1F *h;
protected:

    RooRealProxy x;
    RooRealProxy width;
    RooRealProxy mean;
    int method;

    fastgl::QuadPair *temp = nullptr;
    std::vector<double> gaus_x;
    std::vector<double> gaus_w;

    Double_t gaus_evaluate() const;

    Double_t normal_evaluate() const;

    Double_t cuda_normal_evaluate() const;

    Double_t cuda_gaus_evaluate() const;

    Double_t evaluate() const;

private:

    Double_t sub_evaluate(Double_t x) const;

    Double_t sub_f(Double_t x) const;

    Double_t sub_sigma(Double_t x) const;

ClassDef(RooMyPdf, 1) // Your description goes here...
};

#endif
